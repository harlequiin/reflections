
What happens when you initialize a repository? Why do you need it?
    When you initialize a repository all the necessary attributes and
    metadata are assigned to it. Once you do that, the system can start
    to follow the status of your repository and you can start to use the 
    necessary tools (commits, logs, ...) to operate on your repository.

How is the staging area different from the working directory and the repository?
What value du you think it offers?
    Staging area is like a limbo between working directory and repository.
    You need to choose what files to commit and if commit multiple files.
    Staging area provide you with the opportunity of actively choosing
    what files to include in next commit (snapshot) before these snapshots
    are being made. Not all files in the working direcory are neccesarily
    intended to be tracked, so that's why you need a seperate staging area
    before commiting files.

How can you use the staging area to make sure you have one commit per logical
 change?
    I can make changes to several files in my working directory, but
    I can add them one by one to the staging area and commit them one by one,
    so that I execute the principle of making one commit per logical change in
    one or more closely related files.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    One of the most common situations is when you want to try some experimental
    code/solutions to your code, but you don't want to interfere with the main 
    history - you create a seperate branch and you can now safely experiment with your 
    code and if it works and you're satisfied with it, you can merge it with the 
    main branch, or delete it, if you think it's bad after all.
    Branching and merging allows to add seperate features to the main code, without
    initially interfering with it. Only when these features have matured you can 
    safely add the (merge) to the main code and it's history.

How do the diagrams help you visualize the branch structure?
    Essentialy branches structure is tree structure - so naturally drawing a tree
    diagram to represent branch struture (with nodes as commits) helps you to
    visualize and understang everything about branches, branch history, concept
    of reachability etc.

What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?
    The result is a new unified branch which includes commits and changes from both
    of the braches - when you run 'git log' on the merged branch, it shows you all
    the commits from both branches in time-sorted order. We represent it in the
    diagram the way we do in order to show that there were seperate branches which
    probably dealt with different features (or at least on of them), and were later
    merged, implying that whatever was built in the branches was succesful and later
    integrated together with the other branch (master branch, mostly) and also to
    show that the new merged branch commit sees (reaches) previous commits from both of
    the formerly seperated branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually??
    Automatic merging is more convienient in a sense that Git does everything for you.
    However - in a case when there are 2 different changes to the same line, it cannot tell
    which one is correct or even if they both are correct, so Git asks you to resolve
    all conflicts manually by signalling and marking the appropriate parts in a source
    code. 
    Doing all the merges manually would be tedious - a proper version control system should
    aim to maximally make these tasks automatic.
